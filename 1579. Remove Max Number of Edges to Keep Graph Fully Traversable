# https://leetcode.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/submissions/1304681399?envType=daily-question&envId=2024-06-30

class Solution(object):
    def maxNumEdgesToRemove(self, n, edges):
        class UnionFind:
            def __init__(self, size):
                self.parent = list(range(size))
                self.rank = [1] * size
                self.components = size  # Number of connected components
            
            def find(self, u):
                if self.parent[u] != u:
                    self.parent[u] = self.find(self.parent[u])  # Path compression
                return self.parent[u]
            
            def union(self, u, v):
                rootU = self.find(u)
                rootV = self.find(v)
                
                if rootU != rootV:
                    # Union by rank
                    if self.rank[rootU] > self.rank[rootV]:
                        self.parent[rootV] = rootU
                    elif self.rank[rootU] < self.rank[rootV]:
                        self.parent[rootU] = rootV
                    else:
                        self.parent[rootV] = rootU
                        self.rank[rootU] += 1
                    self.components -= 1
                    return True
                return False
        edges.sort(key=lambda x: -x[0])  # Sort edges by type in descending order
        ufa = UnionFind(n + 1)  # Alice's union-find
        ufb = UnionFind(n + 1)  # Bob's union-find
        
        usedEdges = 0
        
        # Type 3 edges (common)
        for t, u, v in edges:
            if t == 3:
                if ufa.union(u, v):
                    ufb.union(u, v)
                    usedEdges += 1
        
        # Type 1 edges (Alice)
        for t, u, v in edges:
            if t == 1:
                if ufa.union(u, v):
                    usedEdges += 1
        
        # Type 2 edges (Bob)
        for t, u, v in edges:
            if t == 2:
                if ufb.union(u, v):
                    usedEdges += 1
        
        # Check if both Alice and Bob can traverse the entire graph
        if ufa.components > 2 or ufb.components > 2:
            return -1
        
        return len(edges) - usedEdges
        print(maxNumEdgesToRemove(n, edges))
        
        
