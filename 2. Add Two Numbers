# https://leetcode.com/problems/add-two-numbers/submissions/1313112791

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummy = ListNode(0)
        current = dummy
        carry = 0

        while l1 or l2 or carry:
            val1 = (l1.val if l1 else 0)
            val2 = (l2.val if l2 else 0)
            carry, out = divmod(val1 + val2 + carry, 10)
            
            current.next = ListNode(out)
            current = current.next
            
            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next

        return dummy.next

        # Helper function to create a linked list from a list and return the head
        def createLinkedList(arr):
            if not arr:
                return None
            head = ListNode(arr[0])
            current = head
            for val in arr[1:]:
                current.next = ListNode(val)
                current = current.next
            return head

        # Helper function to convert linked list to list for easy comparison
        def linkedListToList(head):
            result = []
            while head:
                result.append(head.val)
                head = head.next
            return result

        # Example usage
        # l1 = createLinkedList([2, 4, 3])
        # l2 = createLinkedList([5, 6, 4])
        solution = Solution()
        result = solution.addTwoNumbers(l1, l2)
        print(linkedListToList(result))  # Output: [7, 0, 8]
        
        
