# https://leetcode.com/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/submissions/1310066287?envType=daily-question&envId=2024-07-05

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def nodesBetweenCriticalPoints(self, head):
        if not head or not head.next or not head.next.next:
            return [-1, -1]

        critical_indices = []
        idx = 1
        prev, curr, nxt = head, head.next, head.next.next

        while nxt:
            if (curr.val > prev.val and curr.val > nxt.val) or (curr.val < prev.val and curr.val < nxt.val):
                critical_indices.append(idx)
            prev, curr, nxt = curr, nxt, nxt.next
            idx += 1

        # If there are less than 2 critical points
        if len(critical_indices) < 2:
            return [-1, -1]

        # Calculate minimum and maximum distances
        min_distance = float('inf')
        max_distance = critical_indices[-1] - critical_indices[0]

        for i in range(1, len(critical_indices)):
            min_distance = min(min_distance, critical_indices[i] - critical_indices[i - 1])

        return [min_distance, max_distance]

# Helper function to create linked list from list
        def create_linked_list(lst):
            if not lst:
                return None
            head = ListNode(lst[0])
            current = head
            for val in lst[1:]:
                current.next = ListNode(val)
                current = current.next
            return head

        
        solution = Solution()
        print(solution.nodesBetweenCriticalPoints(head))
        
