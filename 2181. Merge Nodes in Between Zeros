# https://leetcode.com/problems/merge-nodes-in-between-zeros/submissions/1309517701?envType=daily-question&envId=2024-07-04

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode(0)
        current_sum = 0
        result_current = dummy
        current = head.next  # Skip the first zero

        while current:
            if current.val == 0:
                # When encountering a zero, finalize the current sum segment
                if current_sum > 0:
                    result_current.next = ListNode(current_sum)
                    result_current = result_current.next
                    current_sum = 0  # Reset the sum for the next segment
            else:
                # Sum up the values between zeros
                current_sum += current.val
            current = current.next
        
        return dummy.next

    # Helper function to create linked list from list
    def create_linked_list(lst):
        dummy = ListNode(0)
        current = dummy
        for value in lst:
            current.next = ListNode(value)
            current = current.next
        return dummy.next

    # Helper function to print linked list
    def print_linked_list(head):
        values = []
        current = head
        while current:
            values.append(current.val)
            current = current.next
        print(values)

        result = mergeNodes(head)
        print_linked_list(result)
        
